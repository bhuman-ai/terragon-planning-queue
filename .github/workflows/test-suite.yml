name: Terragon Collaboration System Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY_TEST }}
  PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY_TEST }}
  DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN_TEST }}
  DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID_TEST }}
  CRON_SECRET: ${{ secrets.CRON_SECRET_TEST }}

jobs:
  # Security Tests - Critical Path
  security-tests:
    name: üîê Security & Sacred Document Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: üîê Run Security Tests
        run: npm run test:security
        
      - name: üìä Upload security coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: security
          name: security-coverage
          
      - name: üíæ Store security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            test-reports/
            coverage/
          retention-days: 30

  # Collaboration API Tests
  collaboration-tests:
    name: ü§ù Collaboration API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-tests # Security must pass first
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: ü§ù Run Collaboration Tests
        run: npm run test:collaboration
        
      - name: üìä Upload collaboration coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: collaboration
          name: collaboration-coverage
          
      - name: üíæ Store collaboration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: collaboration-test-results
          path: |
            test-reports/
            coverage/
          retention-days: 30

  # Integration Tests
  integration-tests:
    name: üîÑ Integration & E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [security-tests, collaboration-tests]
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: üîÑ Run Integration Tests
        run: npm run test:integration
        
      - name: üé≠ Run E2E Tests
        run: npm run test:e2e
        
      - name: üìä Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-coverage
          
      - name: üíæ Store integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            test-reports/
            coverage/
          retention-days: 30

  # Comprehensive Test Suite
  comprehensive-tests:
    name: üß™ Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [security-tests, collaboration-tests, integration-tests]
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: üß™ Run Comprehensive Test Suite
        run: node __tests__/test-runner.js
        
      - name: üìä Upload comprehensive coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: comprehensive
          name: comprehensive-coverage
          
      - name: üíæ Store comprehensive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            test-reports/
            coverage/
          retention-days: 30
          
      - name: üìù Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsPath = path.join(process.cwd(), 'test-reports', 'test-results.json');
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                const comment = `
            ## üß™ Test Results Summary
            
            **Overall Status:** ${results.results.overall.success ? '‚úÖ PASSED' : '‚ùå FAILED'}
            **Test Suites:** ${results.results.overall.successfulSuites}/${results.results.overall.totalSuites} passed
            **Duration:** ${(results.results.overall.totalDuration / 1000).toFixed(1)}s
            
            ${results.results.overall.coverage ? `
            ### üìä Coverage Report
            - **Lines:** ${results.results.overall.coverage.lines.percentage}%
            - **Functions:** ${results.results.overall.coverage.functions.percentage}%
            - **Branches:** ${results.results.overall.coverage.branches.percentage}%
            - **Statements:** ${results.results.overall.coverage.statements.percentage}%
            ` : ''}
            
            ### üîç Suite Breakdown
            ${Object.values(results.results).filter(r => r && r.suiteName).map(r => 
              `- ${r.success ? '‚úÖ' : '‚ùå'} **${r.suiteName}**: ${(r.duration / 1000).toFixed(1)}s`
            ).join('\n')}
            
            <details>
            <summary>üìÅ View detailed reports</summary>
            
            Comprehensive test reports are available in the artifacts for this workflow run.
            </details>
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post test results comment:', error);
            }

  # Sacred Document Integrity Check
  sacred-document-check:
    name: üìú Sacred Document Integrity
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comparison
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: üìú Check CLAUDE.md Changes
        run: |
          # Check if CLAUDE.md was modified
          if git diff --name-only origin/master...HEAD | grep -q "CLAUDE.md"; then
            echo "üö® CLAUDE.md has been modified in this PR"
            echo "Running sacred document integrity checks..."
            
            # Run sacred document tests
            npm run test -- --testPathPattern="sacred-document-integrity" --verbose
            
            # Check for violations in the diff
            echo "Checking for sacred principle violations..."
            git diff origin/master...HEAD CLAUDE.md > claude_diff.txt
            
            # Check for forbidden patterns
            if grep -i "simulation" claude_diff.txt && ! grep -i "no.simulation" claude_diff.txt; then
              echo "‚ùå SACRED VIOLATION: Changes mention simulations"
              exit 1
            fi
            
            if grep -i "fallback" claude_diff.txt && ! grep -i "no.fallback" claude_diff.txt; then
              echo "‚ùå SACRED VIOLATION: Changes mention fallbacks"
              exit 1
            fi
            
            if grep -i "bhumanai" claude_diff.txt && ! grep -i "never.*bhumanai" claude_diff.txt; then
              echo "‚ùå SACRED VIOLATION: Deployment target violation"
              exit 1
            fi
            
            echo "‚úÖ Sacred document changes appear valid"
          else
            echo "‚ÑπÔ∏è CLAUDE.md was not modified in this PR"
          fi

  # Performance & Load Tests
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: comprehensive-tests
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: ‚ö° Run Performance Tests
        run: |
          echo "Running performance benchmarks..."
          npm run test -- --testPathPattern="performance|load" --verbose
          
      - name: üìä Performance Report
        run: |
          echo "Generating performance report..."
          # Add performance metrics collection here
          
  # Security Scan
  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üõ°Ô∏è Run Security Audit
        run: npm audit --audit-level=high
        
      - name: üîç CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Deployment Readiness Check
  deployment-check:
    name: üöÄ Deployment Readiness
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, sacred-document-check, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
      - name: üìö Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: üèóÔ∏è Build application
        run: npm run build
        
      - name: üöÄ Deployment readiness check
        run: |
          echo "‚úÖ All tests passed"
          echo "‚úÖ Security scans completed"
          echo "‚úÖ Sacred document integrity verified"
          echo "‚úÖ Application builds successfully"
          echo "üöÄ Ready for deployment to sacred target: https://vercel.com/bhuman/terragon-vercel/"

  # Cleanup and Notification
  cleanup-and-notify:
    name: üßπ Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, performance-tests, deployment-check]
    if: always()
    
    steps:
      - name: üìä Collect all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-test-results/
          
      - name: üßπ Cleanup old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep only the 10 most recent artifacts
            const oldArtifacts = artifacts.data.artifacts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10);
              
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
            
      - name: üìß Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = `üö® Terragon Test Suite Failed - ${context.workflow}`;
            const body = `
            The Terragon Collaboration System test suite has failed.
            
            **Workflow:** ${context.workflow}
            **Branch:** ${context.ref}
            **Commit:** ${context.sha.substring(0, 7)}
            **Run:** ${context.runId}
            
            Please investigate the failure and ensure sacred document integrity is maintained.
            
            **Sacred Principles Reminder:**
            - NO SIMULATIONS
            - NO FALLBACKS  
            - ALWAYS REAL
            
            View details: ${context.payload.repository.html_url}/actions/runs/${context.runId}
            `;
            
            // Create issue for failed tests on main branch
            if (context.ref === 'refs/heads/master' || context.ref === 'refs/heads/main') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ['bug', 'testing', 'sacred-violation']
              });
            }